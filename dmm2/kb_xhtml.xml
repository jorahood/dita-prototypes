<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the DITA Open Toolkit project hosted on 
     Sourceforge.net. See the accompanying license.txt file for 
     applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2004, 2009 All Rights Reserved. -->

<!-- 
  | basedir can be specified to other places based on your need.
  |
  | Note: input, output, and temp directories will base on the basedir if 
  | they are relative paths.
  * -->

<project name="kb_xhtml" default="client-all-audience-all" basedir=".">
  <!-- Set a property for each environment variable -->
  <property environment="env"/>
  
  <!-- dita.dir should point to the toolkit's root directory -->
  <property name="dita.dir" value="${env.DITA_HOME}"/>
  
  <property name="kb.output.dir"
    value="out${file.separator}client-all${file.separator}audience-all"/>
  <property name="css.source.dir" value="${dita.dir}${file.separator}samples${file.separator}css"/>

  <!-- if file is a relative file name, the file name will be resolved 
       relative to the importing file -->
  <import file="${dita.dir}${file.separator}integrator.xml"/>
  
  <target name="client-all-audience-all" depends="integrate">
    <echo>This transforms a given domain with filtering for client "all" and audience "all"</echo>

    <ant antfile="${dita.dir}${file.separator}build.xml" target="init">
      <!-- please refer to the toolkit's documentation for supported parameters, and 
           specify them based on your needs -->
      <property name="args.input"
        value="domain-all.ditamap"/>
      <property name="output.dir"
        value="${kb.output.dir}"/>
      <property name="transtype" value="xhtml"/>

      <!-- args.css = the name of the CSS file -->
      <property name="args.css"
        value="style.css"/>
      <!-- args.csspath = the path relative to the output directory; in
           this case, the CSS will be in out/css -->
      <property name="args.csspath"
        value="css"/>
      <!-- args.copycss = whether to copy the CSS file to the output directory. -->
      <property name="args.copycss"
        value="yes"/>
      <!-- args.cssroot = where to find the CSS file on the local file system. -->
      <property name="args.cssroot"
        value="${css.source.dir}"/>
    </ant>

    <!-- The toolkit currently does not scan CSS files to retrieve
         related resources. The sample CSS above references two JPG files;
         copy those files to the output CSS directory (output.dir + csspath). -->
    <copy todir="${kb.output.dir}${file.separator}css">
        <fileset dir="${css.source.dir}"
            includes="*.jpg"/>
    </copy>

  </target>
</project>
