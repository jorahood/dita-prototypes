Dita Maturity Model 2 uses dita maps to abstract cross-referencing and reuse of documents. Still using dita topics

Notes on the structure of docs:

- The Role of Ditamaps
I've been struggling with nailing down the place of a ditamap in the kb structure. Up until this moment I've been thinking that each document should have one ditamap for each interface it is delivered in, but while reading http://dita.xml.org/improving-relationships-relationship-tables I was again reminded that the intent of ditamaps was for there to be one ditamap for each finished deliverable, e.g., product manual or help system. This would mean for us that each kb interface, (e.g., kb.iu.edu, uits.iu.edu) or domain class, or virtual kb, would have a single ditamap representing the structure of the relationship among all the documents available in that interface. That would make for a large reltable in the ditamap. I think the approach explained in that article makes more sense than the default of having reciprocal links between cells in a row: use multiple rows with linking="sourceonly" on the first, source topic, column and linking="targetonly" on the other three target columns. Then you are defining a greater number of one-way links using more rows instead of a fewer number of two-way links, allowing you to use the first column as an index. See the two diagrams on that page with two-headed arrows in the first 3-column example and the unidirectional arrows in the second 4-column example.

A single ditamap for an entire interface could be unweildy, however it's exactly the kind of thing that would be useful for virtual kb clients that want to grab a set of documents to cache; a DITA-compliant replacement for what we have now--the "documents" rest call which returns a list of all docs in a domain class. If instead you could get a ditamap with a reltable in it that pointed to all the documents it could give you information about links between docs. 

Perhaps a master dita map for a domain would consist of <navref>s or <linkref>s to other ditamaps. <navref>s are for 'a pointer to another map which should be preserved as a transcluding link rather than resolved. Output formats that support such linking will integrate the target when displaying the referencing map to an end user.

For example, if a map is converted to the Eclipse help system format, the DITA element <navref mapref="other.ditamap"/> should be converted to the Eclipse element <link toc="other.xml"/>. When Eclipse loads the referencing map, it will replace this link element with the contents of other.xml, provided that other.xml is available.' [http://docs.oasis-open.org/dita/v1.1/CS01/langspec/langref/navref.html]

Then browsing the ditamap would let you see the entire scope of the kb itself--the relationships between pieces of content. And you would be able to do your output transformation on the entire kb by just pointing the OT at the master ditamap, because it follows all topicrefs and transforms all referenced files. 

This would give us a nice structure for a packaged "kb in a box" to give to partners who wanted to rebrand our content in their own interfaces but don't have the resources to set up a server to do it. In creating the package, we would do an XSLT transform to a custom output format "XKBML 2" turning it into deliverable xml with conrefs resolved, cross-reference links inserted, and conditional text hidden or shown at transformation time, that only needs slight xslt or even css styling to transform to xhtml. This would be a kb that was essentially a collection of web pages, like Ruby's Rdoc browser pages, such as the pages for Sinatra: http://www.sinatrarb.com/api/ 

Thinking about extending this idea of having different transforms for the basic DITA content to work with the documents in different ways or through different lenses, or with different perspectives, e.g., creating "kb in a box" with xhtml-ready xkbml 2, then we could also steal the idea of embedding commentary and annotations in the documents that would allow us to unify our review-generated metadata (i.e., notes from worklists & kbreview) about the content with the content itself but only see it when exposed in an XMetal Reviewer-style peer review environment when the xml is interacted with in peer-review mode. This is kind of the inverse of how I've been thinking of a KB IDE: instead of having to have a tool to integrate data from lots of different sources to get a complete picture of document lifecycle, you embed as much of that information as possible in the document itself and then filter what kinds of metadata you are shown based on what you're trying to do with the document. Because really, all the notes and comments in worklists and kbreview are just metadata about documents. Everything revolves around documents.

Think about how I would do the Oncourse Help Tool in this way: The TOC doc, auob, would be a ditamap.

- Representing Hotitems, Refs, and Refbys
* In DMM2 we are still not worrying about concept, task, and reference topics types. For DMM3 I may want to copy this 4 column layout idea: [http://dita.xml.org/improving-relationships-relationship-tables]. Now I will just dump all the hotitems, refs, and refbys into one relcell in a one-row reltable.
* the linking relationships of docs (i.e., hotitems, refs, and refbys) are expressed in the topic maps (e.g., axvp.ditamap and atau.ditamap). Note that each table consists of only one row. I'm not sure what the purpose or effect of multiple rows in a table is on transformed docs. The OT seems to only generate "Related information" links using the first row. I'm trying using the <topicgroup> element to group together similar links; a topicgroup for refs, a topicgroup for refbys, a topicgroup for hotitems. I'm not sure what benefit we'll get from nesting them in the groups but I feel better about the structure. It's more semantic to put similar elements inside an element than to just give them the same attribute value (setting props for each individual topicref). I still use the props attribute to identify the different <topicgroups> though.
  ** I represent a Ref as a topicref with a linking="sourceonly" attribute so that the link only goes from the linked refby to the receiving doc. E.g., in atau.ditamap, the <topicref> to axvp. 
  ** A ref is represented as a <topicref> with a linking="targetonly" attribute. E.g., axvp.ditamap expresses the other side of the linking relationship between atau and axvp with a <topicref href="atau.dita" linking="targetonly"/>.
  ** Hotitems use the linking="targetonly" attribute to express the one-to-many nature of hotitem references; they're glossary terms so you don't normally want to see all the documents that they appear in--that would be an index. 